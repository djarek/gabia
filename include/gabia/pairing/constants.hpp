//
// Copyright (c) 2017 Damian Jarek (damian dot jarek93 at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/djarek/gabia
//

#ifndef GABIA_PAIRING_CONSTANTS_HPP
#define GABIA_PAIRING_CONSTANTS_HPP

#include <gabia/bytes.hpp>
#include <gabia/crypto/aead.hpp>
#include <gabia/crypto/srp_context.hpp>
#include <gabia/tlv8.hpp>

namespace gabia {
namespace pairing {

enum class tag : uint8_t {
    method = 0x00,
    identifier = 0x01,
    salt = 0x02,
    public_key = 0x03,
    proof = 0x04,
    encrypted_data = 0x05,
    state = 0x06,
    error = 0x07,
    retry_delay = 0x08,
    certificate = 0x09,
    signature = 0x0A,
    permissions = 0x0B,
    fragment_data = 0x0C,
    fragment_last = 0x0D,
    separator = 0xFF
};

enum class method : uint8_t {
    unknown = 0x00,
    pair_setup = 0x01,
    pair_verify = 0x02,
    pairing_add = 0x03,
    pairing_remove = 0x04,
    pairings_list = 0x05
};

enum class error : uint8_t {
    unknown = 0x01,
    authentication = 0x02,
    backoff = 0x03,
    max_peers = 0x04,
    max_tries = 0x05,
    unavailable = 0x06,
    busy = 0x07
};

enum class state : uint8_t {
    unknown = 0x00,
    m1 = 0x01,
    m2 = 0x02,
    m3 = 0x03,
    m4 = 0x04,
    m5 = 0x05,
    m6 = 0x06
};

namespace constants {
constexpr auto user_name = make_cstring_span("Pair-Setup");

constexpr auto setup_session_salt =
    make_cstring_span("Pair-Setup-Encrypt-Salt");
constexpr auto setup_session_info =
    make_cstring_span("Pair-Setup-Encrypt-Info");

constexpr auto verify_session_salt =
    make_cstring_span("Pair-Verify-Encrypt-Salt");
constexpr auto verify_session_info =
    make_cstring_span("Pair-Verify-Encrypt-Info");

constexpr auto controller_signing_info =
    make_cstring_span("Pair-Setup-Controller-Sign-Info");
constexpr auto controller_signing_salt =
    make_cstring_span("Pair-Setup-Controller-Sign-Salt");

constexpr auto accessory_signing_info =
    make_cstring_span("Pair-Setup-Accessory-Sign-Info");
constexpr auto accessory_signing_salt =
    make_cstring_span("Pair-Setup-Accessory-Sign-Salt");

constexpr auto setup_m5_nonce = make_cstring_span("\0\0\0\0PS-Msg05");
constexpr auto setup_m6_nonce = make_cstring_span("\0\0\0\0PS-Msg06");

constexpr auto verify_m2_nonce = make_cstring_span("\0\0\0\0PV-Msg02");
constexpr auto verify_m3_nonce = make_cstring_span("\0\0\0\0PV-Msg03");

constexpr auto generator = as_byte_array(0x05);
static_assert(generator.size() == crypto::srp_generator_size,
              "Invalid generator size!");

constexpr auto modulus = as_byte_array(
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f, 0xda, 0xa2,
    0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b, 0x80, 0xdc, 0x1c, 0xd1,
    0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6,
    0x3b, 0x13, 0x9b, 0x22, 0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd,
    0xef, 0x95, 0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,
    0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51, 0xc2, 0x45,
    0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6, 0xf4, 0x4c, 0x42, 0xe9,
    0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff, 0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed,
    0xee, 0x38, 0x6b, 0xfb, 0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11,
    0x7c, 0x4b, 0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,
    0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda, 0x48, 0x36,
    0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8, 0xfd, 0x24, 0xcf, 0x5f,
    0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3, 0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56,
    0x20, 0x85, 0x52, 0xbb, 0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d,
    0x67, 0x0c, 0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,
    0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36, 0xce, 0x3b,
    0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03, 0x9b, 0x27, 0x83, 0xa2,
    0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5, 0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9,
    0xde, 0x2b, 0xcb, 0xf6, 0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c,
    0xea, 0x95, 0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,
    0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xaa, 0xc4, 0x2d, 0xad, 0x33, 0x17, 0x0d,
    0x04, 0x50, 0x7a, 0x33, 0xa8, 0x55, 0x21, 0xab, 0xdf, 0x1c, 0xba, 0x64,
    0xec, 0xfb, 0x85, 0x04, 0x58, 0xdb, 0xef, 0x0a, 0x8a, 0xea, 0x71, 0x57,
    0x5d, 0x06, 0x0c, 0x7d, 0xb3, 0x97, 0x0f, 0x85, 0xa6, 0xe1, 0xe4, 0xc7,
    0xab, 0xf5, 0xae, 0x8c, 0xdb, 0x09, 0x33, 0xd7, 0x1e, 0x8c, 0x94, 0xe0,
    0x4a, 0x25, 0x61, 0x9d, 0xce, 0xe3, 0xd2, 0x26, 0x1a, 0xd2, 0xee, 0x6b,
    0xf1, 0x2f, 0xfa, 0x06, 0xd9, 0x8a, 0x08, 0x64, 0xd8, 0x76, 0x02, 0x73,
    0x3e, 0xc8, 0x6a, 0x64, 0x52, 0x1f, 0x2b, 0x18, 0x17, 0x7b, 0x20, 0x0c,
    0xbb, 0xe1, 0x17, 0x57, 0x7a, 0x61, 0x5d, 0x6c, 0x77, 0x09, 0x88, 0xc0,
    0xba, 0xd9, 0x46, 0xe2, 0x08, 0xe2, 0x4f, 0xa0, 0x74, 0xe5, 0xab, 0x31,
    0x43, 0xdb, 0x5b, 0xfc, 0xe0, 0xfd, 0x10, 0x8e, 0x4b, 0x82, 0xd1, 0x20,
    0xa9, 0x3a, 0xd2, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff);
static_assert(modulus.size() == crypto::srp_modulus_size,
              "Invalid modulus size!");

constexpr auto verifier = as_byte_array(
    0x28, 0x59, 0xd5, 0x87, 0x10, 0xbf, 0x6d, 0x10, 0x2f, 0xec, 0xbf, 0xf8,
    0xd1, 0xc8, 0xb2, 0xd4, 0x09, 0x42, 0x06, 0x06, 0x8a, 0xc9, 0xc3, 0x99,
    0xd8, 0xcc, 0x7e, 0xb4, 0xd2, 0x2e, 0xe2, 0x7a, 0xd4, 0xea, 0x31, 0x62,
    0x3a, 0x21, 0x29, 0x5f, 0x5e, 0x13, 0x0f, 0x9e, 0xdf, 0xe6, 0x36, 0x2d,
    0x89, 0x1a, 0xfa, 0x55, 0xe4, 0x0d, 0xeb, 0x05, 0x92, 0x46, 0x23, 0x62,
    0x1b, 0xab, 0x2a, 0x03, 0x0d, 0x42, 0x87, 0x7b, 0x54, 0x3a, 0xa7, 0xe1,
    0x27, 0x8a, 0x5c, 0x08, 0x25, 0x9d, 0xf5, 0xad, 0x0f, 0xa7, 0xfc, 0xf3,
    0x28, 0x8d, 0x07, 0xf8, 0x47, 0x73, 0xdd, 0x96, 0x49, 0x29, 0x9e, 0x10,
    0x72, 0x47, 0x3a, 0xac, 0xa6, 0x00, 0x5e, 0x0c, 0x77, 0x6c, 0x11, 0xec,
    0x36, 0x06, 0x6b, 0xf3, 0xc7, 0xd3, 0xdf, 0xc0, 0xd8, 0xb3, 0xb8, 0x1c,
    0x07, 0x1a, 0xe2, 0x7d, 0xa2, 0x95, 0x8a, 0xc0, 0xb7, 0xec, 0x5c, 0x44,
    0x9a, 0x81, 0x7f, 0xa9, 0x11, 0x48, 0x17, 0x54, 0x77, 0x78, 0x40, 0x6d,
    0x77, 0xa9, 0xe0, 0xa1, 0xd9, 0xe9, 0xa9, 0xf6, 0x1d, 0x2d, 0xaf, 0x24,
    0x20, 0x4d, 0x38, 0xc5, 0x0e, 0x26, 0x6f, 0x5e, 0xfa, 0x91, 0x52, 0xa1,
    0x88, 0x8a, 0x5e, 0xd7, 0x8c, 0x66, 0xa8, 0x7f, 0x7a, 0x64, 0x24, 0xf5,
    0x01, 0x22, 0x85, 0x4e, 0x08, 0x33, 0xfa, 0x73, 0x64, 0x5d, 0xe4, 0xf8,
    0x66, 0xe1, 0x74, 0x5e, 0xcc, 0x3a, 0xf0, 0xe4, 0x0e, 0x68, 0x56, 0x21,
    0x06, 0x62, 0x10, 0xe5, 0x50, 0x5b, 0xdf, 0x7e, 0x6f, 0xd7, 0x41, 0x5c,
    0x32, 0x3f, 0x2f, 0x61, 0x90, 0x48, 0xba, 0xb1, 0x3d, 0x05, 0xa9, 0xb2,
    0xca, 0xfc, 0x64, 0x6f, 0x13, 0x0d, 0xf7, 0x11, 0xc9, 0xed, 0x5e, 0x27,
    0x8a, 0xbf, 0x03, 0xea, 0xe2, 0xc5, 0xd9, 0x5e, 0x12, 0x0b, 0x1d, 0x22,
    0xe7, 0xc4, 0x20, 0x2d, 0x94, 0x61, 0x93, 0xb2, 0xe9, 0xb5, 0x60, 0x9f,
    0x6e, 0x1e, 0xde, 0x8f, 0x79, 0x54, 0x44, 0x6a, 0x4f, 0x10, 0xf5, 0x8e,
    0xa9, 0x43, 0x94, 0xf7, 0x31, 0x4c, 0xaa, 0xc7, 0x96, 0x66, 0x02, 0x9f,
    0x84, 0x38, 0x62, 0xaa, 0x0d, 0xe8, 0x08, 0xac, 0x5e, 0x46, 0x4d, 0xe3,
    0x6d, 0xa8, 0x70, 0x62, 0x41, 0x1c, 0x38, 0xcc, 0xa1, 0x2f, 0x40, 0x55,
    0xf9, 0x02, 0xaa, 0x74, 0xda, 0xac, 0xd9, 0x78, 0x2a, 0x10, 0xaa, 0x28,
    0x69, 0xbc, 0x28, 0xe3, 0x1f, 0xcb, 0x52, 0xf4, 0x9e, 0xee, 0xeb, 0x55,
    0x6d, 0xb3, 0xef, 0x0a, 0xb4, 0x29, 0x1a, 0x05, 0x63, 0x57, 0x0b, 0x4c,
    0x76, 0x58, 0x2d, 0x54, 0x0e, 0x32, 0x8a, 0x44, 0x0f, 0xed, 0x30, 0x22,
    0xef, 0xd5, 0xa0, 0x41, 0x37, 0xe4, 0x0f, 0x2d, 0x42, 0x9b, 0xe5, 0xff,
    0x56, 0xef, 0xcb, 0xb8, 0x30, 0x6d, 0xbc, 0x80, 0x42, 0x0c, 0x8e, 0xdd);
static_assert(verifier.size() == crypto::srp_verifier_size,
              "Invalid verifier size");

constexpr auto salt =
    as_byte_array(0x9b, 0x16, 0x27, 0xa3, 0xd4, 0xd5, 0x5c, 0x1d, 0x06, 0xf3,
                  0x4c, 0x3c, 0x9d, 0x90, 0xbe, 0xb1);
static_assert(salt.size() == crypto::srp_salt_size, "Invalid salt size");

} // namespace

} // namespace pairing

namespace tlv {
template <>
struct is_tag<pairing::tag> : std::true_type {};
} // namespace tlv
} // namespace gabia

#endif // GABIA_PAIRING_CONSTANTS_HPP
